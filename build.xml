<?xml version="1.0" encoding="UTF-8"?>
<project name="dinghyprop" default="all">
  
  
  <property file="dinghyprop.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.rbc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.zip"/>
    <include name="*.apk"/>
    <include name="*.war"/>
    <include name="*.egg"/>
    <include name="*.ear"/>
    <include name="*.ane"/>
    <include name="*.swc"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.ftl"/>
  </patternset>
  
  <!-- Modules -->
  
  <import file="${basedir}/Remotes/module_remotes.xml"/>
  
  <import file="${basedir}/Client/module_client.xml"/>
  
  <import file="${basedir}/Simulator/module_simulator.xml"/>
  
  <import file="${basedir}/Monitors/module_monitors.xml"/>
  
  <import file="${basedir}/Server/module_server.xml"/>
  
  <import file="${basedir}/module_dinghyprop.xml"/>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.remotes, clean.module.client, clean.module.simulator, clean.module.monitors, clean.module.server, clean.module.dinghyprop" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.remotes, compile.module.client, compile.module.simulator, compile.module.monitors, compile.module.server, compile.module.dinghyprop" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.client:jar" value="${basedir}/out/artifacts/Client_jar"/>
    <property name="artifact.output.monitors:jar" value="${basedir}/out/artifacts/Monitors_jar"/>
    <property name="artifact.output.remotes:jar" value="${basedir}/out/artifacts/Remotes_jar"/>
    <property name="artifact.output.server:jar" value="${basedir}/out/artifacts/Server_jar"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.Client.jar" value="${artifacts.temp.dir}/Client.jar"/>
    <property name="temp.jar.path.Monitors.jar" value="${artifacts.temp.dir}/Monitors.jar"/>
    <property name="temp.jar.path.Remotes.jar" value="${artifacts.temp.dir}/Remotes.jar"/>
    <property name="temp.jar.path.Server.jar" value="${artifacts.temp.dir}/Server.jar"/>
  </target>
  
  <target name="artifact.client:jar" depends="init.artifacts, compile.module.client, compile.module.remotes, compile.module.simulator" description="Build &#39;Client:jar&#39; artifact">
    <property name="artifact.temp.output.client:jar" value="${artifacts.temp.dir}/Client_jar"/>
    <mkdir dir="${artifact.temp.output.client:jar}"/>
    <jar destfile="${temp.jar.path.Client.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${client.output.dir}"/>
      <zipfileset file="${basedir}/Client/META-INF/MANIFEST.MF" prefix="META-INF"/>
      <zipfileset dir="${remotes.output.dir}"/>
      <zipfileset file="${basedir}/out/production/Server/cs412/dinghyprop/Master_Stub.class" prefix="cs412/dinghyprop"/>
      <zipfileset dir="${simulator.output.dir}"/>
    </jar>
    <copy file="${temp.jar.path.Client.jar}" tofile="${artifact.temp.output.client:jar}/Client.jar"/>
  </target>
  
  <target name="artifact.monitors:jar" depends="init.artifacts, compile.module.monitors, compile.module.remotes, compile.module.simulator, compile.module.client" description="Build &#39;Monitors:jar&#39; artifact">
    <property name="artifact.temp.output.monitors:jar" value="${artifacts.temp.dir}/Monitors_jar"/>
    <mkdir dir="${artifact.temp.output.monitors:jar}"/>
    <jar destfile="${temp.jar.path.Monitors.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset file="${basedir}/Monitors/src/META-INF/MANIFEST.MF" prefix="META-INF"/>
      <zipfileset dir="${monitors.output.dir}"/>
      <zipfileset dir="${remotes.output.dir}"/>
      <zipfileset dir="${simulator.output.dir}"/>
      <zipfileset dir="${client.output.dir}"/>
      <zipfileset file="${basedir}/out/production/Server/cs412/dinghyprop/Master_Stub.class" prefix="cs412/dinghyprop"/>
    </jar>
    <copy file="${temp.jar.path.Monitors.jar}" tofile="${artifact.temp.output.monitors:jar}/Monitors.jar"/>
  </target>
  
  <target name="artifact.remotes:jar" depends="init.artifacts, compile.module.remotes" description="Build &#39;Remotes:jar&#39; artifact">
    <property name="artifact.temp.output.remotes:jar" value="${artifacts.temp.dir}/Remotes_jar"/>
    <mkdir dir="${artifact.temp.output.remotes:jar}"/>
    <jar destfile="${temp.jar.path.Remotes.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${remotes.output.dir}"/>
      <zipfileset file="${basedir}/Remotes/META-INF/MANIFEST.MF" prefix="META-INF"/>
    </jar>
    <copy file="${temp.jar.path.Remotes.jar}" tofile="${artifact.temp.output.remotes:jar}/Remotes.jar"/>
  </target>
  
  <target name="artifact.server:jar" depends="init.artifacts, compile.module.server, compile.module.remotes, compile.module.simulator" description="Build &#39;Server:jar&#39; artifact">
    <property name="artifact.temp.output.server:jar" value="${artifacts.temp.dir}/Server_jar"/>
    <mkdir dir="${artifact.temp.output.server:jar}"/>
    <jar destfile="${temp.jar.path.Server.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset file="${basedir}/Server/src/META-INF/MANIFEST.MF" prefix="META-INF"/>
      <zipfileset dir="${server.output.dir}"/>
      <zipfileset dir="${remotes.output.dir}"/>
      <zipfileset dir="${simulator.output.dir}"/>
      <zipfileset file="${basedir}/out/production/Client/cs412/dinghyprop/ClientImpl_Stub.class" prefix="cs412/dinghyprop"/>
    </jar>
    <copy file="${temp.jar.path.Server.jar}" tofile="${artifact.temp.output.server:jar}/Server.jar"/>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.client:jar, artifact.monitors:jar, artifact.remotes:jar, artifact.server:jar" description="Build all artifacts">
    <mkdir dir="${artifact.output.client:jar}"/>
    <copy todir="${artifact.output.client:jar}">
      <fileset dir="${artifact.temp.output.client:jar}"/>
    </copy>
    <mkdir dir="${artifact.output.monitors:jar}"/>
    <copy todir="${artifact.output.monitors:jar}">
      <fileset dir="${artifact.temp.output.monitors:jar}"/>
    </copy>
    <mkdir dir="${artifact.output.remotes:jar}"/>
    <copy todir="${artifact.output.remotes:jar}">
      <fileset dir="${artifact.temp.output.remotes:jar}"/>
    </copy>
    <mkdir dir="${artifact.output.server:jar}"/>
    <copy todir="${artifact.output.server:jar}">
      <fileset dir="${artifact.temp.output.server:jar}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>
